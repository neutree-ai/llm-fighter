/* eslint-disable */

// @ts-nocheck

// noinspection JSUnusedGlobalSymbols

// This file was automatically generated by TanStack Router.
// You should NOT make any changes in this file as it will be overwritten.
// Additionally, you should also exclude this file from your linter and/or formatter to prevent it from being checked or modified.

import { Route as rootRouteImport } from './routes/__root'
import { Route as IndexRouteImport } from './routes/index'
import { Route as GamesIndexRouteImport } from './routes/games/index'
import { Route as OauthCallbackRouteImport } from './routes/oauth/callback'
import { Route as GamesNewRouteImport } from './routes/games/new'
import { Route as GamesGameIdRouteImport } from './routes/games/$gameId'
import { Route as DocsFaqRouteImport } from './routes/docs/faq'
import { Route as DocsDesignRouteImport } from './routes/docs/design'

const IndexRoute = IndexRouteImport.update({
  id: '/',
  path: '/',
  getParentRoute: () => rootRouteImport,
} as any)
const GamesIndexRoute = GamesIndexRouteImport.update({
  id: '/games/',
  path: '/games/',
  getParentRoute: () => rootRouteImport,
} as any)
const OauthCallbackRoute = OauthCallbackRouteImport.update({
  id: '/oauth/callback',
  path: '/oauth/callback',
  getParentRoute: () => rootRouteImport,
} as any)
const GamesNewRoute = GamesNewRouteImport.update({
  id: '/games/new',
  path: '/games/new',
  getParentRoute: () => rootRouteImport,
} as any)
const GamesGameIdRoute = GamesGameIdRouteImport.update({
  id: '/games/$gameId',
  path: '/games/$gameId',
  getParentRoute: () => rootRouteImport,
} as any)
const DocsFaqRoute = DocsFaqRouteImport.update({
  id: '/docs/faq',
  path: '/docs/faq',
  getParentRoute: () => rootRouteImport,
} as any)
const DocsDesignRoute = DocsDesignRouteImport.update({
  id: '/docs/design',
  path: '/docs/design',
  getParentRoute: () => rootRouteImport,
} as any)

export interface FileRoutesByFullPath {
  '/': typeof IndexRoute
  '/docs/design': typeof DocsDesignRoute
  '/docs/faq': typeof DocsFaqRoute
  '/games/$gameId': typeof GamesGameIdRoute
  '/games/new': typeof GamesNewRoute
  '/oauth/callback': typeof OauthCallbackRoute
  '/games': typeof GamesIndexRoute
}
export interface FileRoutesByTo {
  '/': typeof IndexRoute
  '/docs/design': typeof DocsDesignRoute
  '/docs/faq': typeof DocsFaqRoute
  '/games/$gameId': typeof GamesGameIdRoute
  '/games/new': typeof GamesNewRoute
  '/oauth/callback': typeof OauthCallbackRoute
  '/games': typeof GamesIndexRoute
}
export interface FileRoutesById {
  __root__: typeof rootRouteImport
  '/': typeof IndexRoute
  '/docs/design': typeof DocsDesignRoute
  '/docs/faq': typeof DocsFaqRoute
  '/games/$gameId': typeof GamesGameIdRoute
  '/games/new': typeof GamesNewRoute
  '/oauth/callback': typeof OauthCallbackRoute
  '/games/': typeof GamesIndexRoute
}
export interface FileRouteTypes {
  fileRoutesByFullPath: FileRoutesByFullPath
  fullPaths:
    | '/'
    | '/docs/design'
    | '/docs/faq'
    | '/games/$gameId'
    | '/games/new'
    | '/oauth/callback'
    | '/games'
  fileRoutesByTo: FileRoutesByTo
  to:
    | '/'
    | '/docs/design'
    | '/docs/faq'
    | '/games/$gameId'
    | '/games/new'
    | '/oauth/callback'
    | '/games'
  id:
    | '__root__'
    | '/'
    | '/docs/design'
    | '/docs/faq'
    | '/games/$gameId'
    | '/games/new'
    | '/oauth/callback'
    | '/games/'
  fileRoutesById: FileRoutesById
}
export interface RootRouteChildren {
  IndexRoute: typeof IndexRoute
  DocsDesignRoute: typeof DocsDesignRoute
  DocsFaqRoute: typeof DocsFaqRoute
  GamesGameIdRoute: typeof GamesGameIdRoute
  GamesNewRoute: typeof GamesNewRoute
  OauthCallbackRoute: typeof OauthCallbackRoute
  GamesIndexRoute: typeof GamesIndexRoute
}

declare module '@tanstack/react-router' {
  interface FileRoutesByPath {
    '/': {
      id: '/'
      path: '/'
      fullPath: '/'
      preLoaderRoute: typeof IndexRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/games/': {
      id: '/games/'
      path: '/games'
      fullPath: '/games'
      preLoaderRoute: typeof GamesIndexRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/oauth/callback': {
      id: '/oauth/callback'
      path: '/oauth/callback'
      fullPath: '/oauth/callback'
      preLoaderRoute: typeof OauthCallbackRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/games/new': {
      id: '/games/new'
      path: '/games/new'
      fullPath: '/games/new'
      preLoaderRoute: typeof GamesNewRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/games/$gameId': {
      id: '/games/$gameId'
      path: '/games/$gameId'
      fullPath: '/games/$gameId'
      preLoaderRoute: typeof GamesGameIdRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/docs/faq': {
      id: '/docs/faq'
      path: '/docs/faq'
      fullPath: '/docs/faq'
      preLoaderRoute: typeof DocsFaqRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/docs/design': {
      id: '/docs/design'
      path: '/docs/design'
      fullPath: '/docs/design'
      preLoaderRoute: typeof DocsDesignRouteImport
      parentRoute: typeof rootRouteImport
    }
  }
}

const rootRouteChildren: RootRouteChildren = {
  IndexRoute: IndexRoute,
  DocsDesignRoute: DocsDesignRoute,
  DocsFaqRoute: DocsFaqRoute,
  GamesGameIdRoute: GamesGameIdRoute,
  GamesNewRoute: GamesNewRoute,
  OauthCallbackRoute: OauthCallbackRoute,
  GamesIndexRoute: GamesIndexRoute,
}
export const routeTree = rootRouteImport
  ._addFileChildren(rootRouteChildren)
  ._addFileTypes<FileRouteTypes>()
